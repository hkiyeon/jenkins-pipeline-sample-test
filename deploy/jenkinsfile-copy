pipeline {
    agent any

    parameters {
        booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
        booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
        booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
        booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')
        
        string(name : 'ACCOUNT_ID', defaultValue : 'hwang088', description : 'ACCOUNT_ID')
        string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'pipeline-test', description : 'DOCKER_IMAGE_NAME')
        string(name : 'DOCKER_TAG', defaultValue : '1.0.0', description : 'DOCKER_TAG')
    }

    environment {
        REGION = "ap-northeast-1"
        ECR_REPOSITORY = "${params.DOCKER_ACCOUNT_ID}/${params.DOCKER_IMAGE_NAME}"
        ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
        DOCKER_ACCOUNT_ID = "${params.ACCOUNT_ID}"
    }

    stages {
        stage('============ Build Docker Image ============')   {
            when {
                expression {return params.BUILD_DOCKER_IMAGE}
            }
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'docker build -t ${ECR_REPOSITORY}:${ECR_DOCKER_TAG} .'
                }
            }
            post {
                always {
                    echo "Docker build success!!"
                }
            }
        }
        stage('============ Run test code ============') {
            when { expression { return params.RUN_TEST }}
            steps {
                sh('docker run --rm ${ECR_REPOSITORY}:${ECR_DOCKER_TAG} /root/.local/bin/pytest -v ')
                echo 'good'
            }
        }
        stage('============ Push Docker Image ============') {
            when { expression { return params.PUSH_DOCKER_IMAGE }}
            steps {
                
                sh '''
                   cat ~/my_password.txt | docker login --username ${DOCKER_ACCOUNT_ID} --password-stdin
                   docker push ${ECR_REPOSITORY}:${ECR_DOCKER_TAG}
                '''
                echo "Push Docker Image to Docker_hub"
            
            }
        }
        stage('============ Deploy workload ============') {
            when { expression { return params.DEPLOY_WORKLOAD}}
            steps {
                echo "DEPLOY WORKLOAD!!"
            }
        }
    }
    post {
        cleanup {
            sh('docker image prune -f')
            sh('docker container prune -f')
        }
    }
}